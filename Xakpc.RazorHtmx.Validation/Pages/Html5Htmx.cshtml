@page
@model Xakpc.RazorHtmx.Validation.Pages.Html5HtmxModel
@{
    ViewData["Title"] = "User Registration";
    ViewData["Handler"] = Url.Page("Html5Htmx");
    ViewContext.ClientValidationEnabled = false;    
}

<hgroup>
    <h2>User Registration - HTML5 with htmx</h2>
    <p>htmx form submit with <mark>HTML5</mark> validation</p>
</hgroup>

<article>
    <partial name="_Form" model="@Model.UserRegistration" view-data="ViewData"/>
</article>

@section Scripts
{
    <script src="https://unpkg.com/htmx.org@1.9.12"></script>
    <script>
        function setupValidation()
        {
            const inputs = document.querySelectorAll('input');

            inputs.forEach(function (input) {
                // Check if the input has any data-err-* attributes
                if (input.dataset.errRequired ||
                    input.dataset.errLength ||
                    input.dataset.errMinmax) {

                    input.addEventListener('invalid', function (event) {
                        const target = event.target;
                        let customMessage = '';

                        if (target.validity.valueMissing && target.dataset.errRequired) {
                            customMessage = target.dataset.errRequired;
                        } else if ((target.validity.tooLong || target.validity.tooShort) && target.dataset.errLength) {
                            customMessage = target.dataset.errLength;
                        } else if ((target.validity.rangeUnderflow || target.validity.rangeOverflow) && target.dataset.errMinmax) {
                            customMessage = target.dataset.errMinmax;
                        }

                        target.setCustomValidity(customMessage);
                    });

                    input.addEventListener('input', function (event) {
                        const target = event.target;
                        target.setCustomValidity(''); // Clear custom message on input

                        // Set aria-invalid based on validity
                        if (target.validity.valid && target.value !== '') {
                            target.setAttribute('aria-invalid', 'false');
                        } else {
                            target.setAttribute('aria-invalid', 'true');
                        }
                    });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            setupValidation();

            document.body.addEventListener('htmx:beforeSwap', function (evt) {
                if (evt.detail.xhr.status === 422) {
                    // allow 422 responses to swap as we are using this as a signal that
                    // a form was submitted with bad data and want to rerender with the
                    // errors
                    //
                    // set isError to false to avoid error logging in console
                    evt.detail.shouldSwap = true;
                    evt.detail.isError = false;
                }
            });

            document.body.addEventListener('htmx:afterSettle', function (evt) {
                if (evt.detail.xhr.status === 422) {
                    setupValidation();
                }
            });
        });
    </script>
}